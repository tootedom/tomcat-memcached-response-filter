h1. Synopsis

Provide on the Product listing page, a snippet of content that contains either/or, or none (if case may be) of what the current item you are viewing has:

*1) Most recently been purchased with.*
*2) Frequently purchased with.*


The above two items can be restricted to:

- The app on which the purchases are made.  I.e. 
- The site on which the purchases are made.
- The channel on which the purchases are made
- The dates on which the purchases are made

 
The below gives a screen shot of the Hack implementation, with the Frequently Purchased Products on the bottom right.


!Screen Shot 2013-05-02 at 20.37.40.png!

----

h2. Implementation thoughts.

The RESTful search K/V store elastic search (http://www.elasticsearch.org/) can be used to provide the implementation that performs the business logic of returning the two items based on the current product page PID:

1) most recently been purchased with
2) frequently purchased with.

!relatedpurchases-overview.graffle.png!


h3. Purchase Path

On purchase, a PUT is sent to the 'Recently Purchased" REST service, that talks to elastic search.  This sends details of the PIDs that are being purchased (additional information such as date, channel, site, app will most likey be useful).

The "Recently Purchased" service POST's to elastic search the basket details that have just been confirmed as purchased by the user.  The "Recently Purchased" service quickly returns a "202: Accepted" to the called, and asynchronously formats that incomming request into data (requests) that are sent to ElasticSearch for indexing:

For example, if four items are purchased the "Recently Purchased" service is called once with JSON containing the order details. From the one JSON document, 4 Documents are created and sent to Elastic Search for indexing:

{noformat}
curl -X POST "http://localhost:9200/relatedpurchases-2013-04-30/relatedpurchase" -d '{
"pid" : 111,
"bought-with" : [123,234,345],
"date" : "2013-04-30T23:51:32"

}'

curl -X POST "http://localhost:9200/relatedpurchases-2013-04-30/relatedpurchase" -d '{
"pid" : 123,
"bought-with" : [111,234,345],
"date" : "2013-04-30T23:51:32"
}'

curl -X POST "http://localhost:9200/relatedpurchases-2013-04-30/relatedpurchase" -d '{
"pid" : 234,
"bought-with" : [111,123,345],
"date" : "2013-04-30T23:51:32"
}'

curl -X POST "http://localhost:9200/relatedpurchases-2013-04-30/relatedpurchase" -d '{
"pid" : 345,
"bought-with" : [111,123,234],
"date" : "2013-04-30T10:51:32"
}'
{noformat}


----

h2.  Returning "Recently Purchased With":

This is done with a date sort search on elastic search, returning, the most recent basket that was purchased that has the current PID

{noformat}
curl -X POST "http://localhost:9200/relatedpurchases-2013-04*,relatedpurchases-2013-05*,relatedpurchases-2013-06*/_search?pretty=true" -d '{
  "sort" : [
        { "date" : {"order" : "desc"} }        
  ],
  "from" : 0, "size" : 1,
  "query" : {
     "term" : { "pid" : 111 } 
  },
  "fields" : [ "bought-with" ]

}'
{noformat}

example result:

{noformat}
 "hits" : {
    "total" : 5,
    "max_score" : null,
    "hits" : [ {
      "_index" : "relatedpurchases-2013-06-01",
      "_type" : "relatedpurchase",
      "_id" : "A0mWUKZvSpObonXqyF_NFw",
      "_score" : null,
      "fields" : {
        "bought-with" : [ 199 ]
      },
      "sort" : [ 1370130692000 ]
    } ]
  }
{noformat}


----

h2.  Returning Frequently Purchased With:

This is done with a facet search on elastic search, returning the top 5 facets (in the 'bought-with' field):
- http://www.elasticsearch.org/guide/reference/api/search/facets/


{noformat}
curl -X POST "http://localhost:9200/relatedpurchases-2013-04*,relatedpurchases-2013-05*,relatedpurchases-2013-06*/_search?pretty=true" -d '{
  "query" : {
 "term" : { "pid" : 111 } 
  },
  "facets" : { 
 "bought-with" : { "terms" : 
     {"field" : "bought-with" } 
 } 
  },
  "size":0
}'
{noformat}

example result:

{noformat}
 "hits" : {
    "total" : 5,
    "max_score" : 1.0,
    "hits" : [ ]
  },
  "facets" : {
    "bought-with" : {
      "_type" : "terms",
      "missing" : 0,
      "total" : 7,
      "other" : 0,
      "terms" : [ {
        "term" : 123,
        "count" : 3
      }, {
        "term" : 345,
        "count" : 1
      }, {
        "term" : 234,
        "count" : 1
      }, {
        "term" : 199,
        "count" : 1
      }, {
        "term" : 122,
        "count" : 1
      } ]
    }
  }
}
{noformat}


----

h2.  Further thoughts

The data sent to elastic search can have additional information.  i.e:


{noformat}
curl -X POST "http://localhost:9200/relatedpurchases-2013-04-30/relatedpurchase" -d '{
"pid" : 111,
"bought-with" : [123,234,345],
"date" : "2013-04-30T23:51:32",
"channel" : "apac"

}'
{noformat}


Then you can restrict searches based on this:

{noformat}
curl -X POST "http://localhost:9200/relatedpurchases-2013-04*,relatedpurchases-2013-05*,relatedpurchases-2013-06*/_search?pretty=true" -d '{
  "query" : {
     "bool" : {
      "must" : [
        {"field" : {"pid" : "111"}},
        {"field" : {"channel" : "apac"}}        
       ]
     } 
  },
  "facets" : { 
 "bought-with" : { "terms" : 
     {"field" : "bought-with" } 
 } 
  },
  "size":0  
}'
{noformat}


h3.  What search would most likely be useful?


- Search by app (i.e. recently purchased on the mobile app)
- Search by brand (most recently purchased on the brand)
- Search by channel (i.e. most recently purchased/freqently on apac)


----

h3. Hack

The implementation details will be below here:


h4. Mapping Template


{noformat}
curl -XPUT http://svc-ecomm.dave.net-a-porter.com:9200/_template/relatedpurchase -d '{
    "template" : "relatedpurchase*",
    "settings" : {
        "number_of_shards" : 2,
        "index.cache.field.type" : "soft",
        "index.refresh_interval" : "5s",
        "index.store.compress.stored" : true,
        "index.query.default_field" : "pid",
        "index.routing.allocation.total_shards_per_node" : 2
    },
    "mappings" : {
        "relatedpurchase" : {
           "_all" : {"enabled" : false},
           "properties" : {              
              "pid": { "type": "string", "index": "not_analyzed" },
              "bought-with": { "type": "long", "index": "not_analyzed" },              
              "date": { "type": "date", "index": "not_analyzed" },
              "channel" : {"type" : "string" , "index" : "not_analyzed" },
              "site" : {"type" : "string" , "index" : "not_analyzed" },
              "app" : { "type" : "string" , "index" : "not_analyzed", "default_value" : "" }
           }   
        }
   }
}'
{noformat}

- How to delete the template:

{noformat}
curl -X DELETE "http://svc-ecomm.dave.net-a-porter.com:9200/_template/relatedpurchase"
{noformat}


h4. Sample test content:

{noformat}
curl -X POST "http://svc-ecomm.dave.net-a-porter.com:9200/relatedpurchases-2013-04-30/relatedpurchase" -d '{
"pid" : 111,
"bought-with" : [123,234,345],
"date" : "2013-04-30T23:51:32",
"channel" : "apac",
"site" : "nap"

}'


curl -X POST "http://svc-ecomm.dave.net-a-porter.com:9200/relatedpurchases-2013-04-30/relatedpurchase" -d '{
"pid" : 111,
"bought-with" : [123],
"date" : "2013-04-30T23:51:32",
"channel" : "apac",
"site" : "mrp"

}'
{noformat}


h4. sample search:

- Find most '*frequently*' puchased, top 5, on 'intl', 'nap', for product 338906
-- https://10.5.1.55/product/338906
{noformat}
curl -X POST "http://svc-ecomm.dave.net-a-porter.com:9200/relatedpurchases-2013*/_search?pretty=true" -d '{
  "query" : {
     "bool" : {
      "must" : [
        {"field" : {"pid" : "338906"}},
        {"field" : {"channel" : "nap-intl"}},
        {"field" : {"site" : "nap"}}
       ]
     } 
  },
  "facets" : { 
      "bought-with" : { 
         "terms" : {"field" : "bought-with", "size" : 5 } 
      } 
  },
  "size":0 
}'
{noformat}


- Find most '*recently*' for product 338906
{noformat}
curl -X POST "http://svc-ecomm.dave.net-a-porter.com:9200/relatedpurchases-2013*/_search?pretty=true" -d '{
  "sort" : [
        { "date" : {"order" : "desc"} }        
  ],
  "from" : 0, "size" : 1,
  "query" : {
     "term" : { "pid" : 338906 } 
  },
  "fields" : [ "bought-with" ]

}'
{noformat}

- Return all the documents in all the indexes, with the most frequently purchased items
{noformat}
curl -X POST "http://svc-ecomm.dave.net-a-porter.com:9200/relatedpurchases-2013*/_search?pretty=true" -d '{
  "query" : {
       "match_all" : {}
     }                  
  },                       
  "facets" : { 
      "bought-with" : { 
         "terms" : {"field" : "bought-with" } 
      }      
  }         
}'
{noformat}
-- Return the most frequently purchased items for specific date
{noformat}
curl -X POST "http://svc-ecomm.dave.net-a-porter.com:9200/relatedpurchases-2013-05-03/_search?pretty=true" -d '{
"query" : {
        "match_all" : {}
      }                  
   },                       
   "facets" : { 
       "bought-with" : { 
          "terms" : {"field" : "bought-with" } 
       }      
   }         
}'
{noformat}
-- Example result:
{noformat}
{
  "took" : 2,
  "timed_out" : false,
  "_shards" : {
    "total" : 2,
    "successful" : 2,
    "failed" : 0
  },
  "hits" : {
    "total" : 3,
    "max_score" : 1.0,
    "hits" : [ {
      "_index" : "relatedpurchases-2013-05-03",
      "_type" : "relatedpurchase",
      "_id" : "UX9Taq0ASW-eXAG28se98g",
      "_score" : 1.0, "_source" : {"pid":"334125","date":"2013-05-03T09:17:45","channel":"nap-intl","site":"nap","bought-with":["332413","331502"]}
    }, {
      "_index" : "relatedpurchases-2013-05-03",
      "_type" : "relatedpurchase",
      "_id" : "u80XsEsfR1eJdrUYBzB1Qg",
      "_score" : 1.0, "_source" : {"pid":"332413","date":"2013-05-03T09:17:45","channel":"nap-intl","site":"nap","bought-with":["334125","331502"]}
    }, {
      "_index" : "relatedpurchases-2013-05-03",
      "_type" : "relatedpurchase",
      "_id" : "4tH_7mDpQ42jQhoMfiF19Q",
      "_score" : 1.0, "_source" : {"pid":"331502","date":"2013-05-03T09:17:45","channel":"nap-intl","site":"nap","bought-with":["334125","332413"]}
    } ]
  }
}
{noformat}


----

h2.  Links for demo

- Show: https://10.5.1.55/product/331502
- buy: https://10.5.1.55/product/331492
-- buy with: https://10.5.1.55/product/331502


----

h2.  Hack Day, Hack Implementation

{info}
It is extremely *HACKY*.
{info}


There are 4 elements to the implementation:

1) The elasticsearch instance.  This 1 elastic search node

2) The Related Purchase service
Tomcat 7, Servlet 3 Async, Disruptor, Jest Client to elastic search

3) Webapp Service Layer
OrderServiceImpl completely hacked to index Order

4) Webapp View
Change to the pgProductDetailsSolr.jsp to hack in JestClient to output table


----

h4. Related Purchase Service

The related purchase service is mostly an Asynchronous service.  As it stands it only implements the indexing functionality.
The indexing is done completely asynchronously to the clients Servlet 3 Aynchronous request.  

The implemention looks similar to the following diagram:
!relatedpurchases-hackimpl.graffle.png!


The flow of the service is:

- Accepted incoming index request (this is a POST with JSON)
-- Nothing is retricting it to just a POST (it's a hack, it should be restricted.  Maybe a PUT to make use of idempotence.. perhaps).

- copy request bytes onto ring buffer
-- The bytes are converted to a String and JSON parsed.
-- The ringbuffer deals in IndexRequest objects

- respond to client with a 201 (This should have been a 202: Accepted)

- A Event handler takes the IndexRequest object off the ring buffer

- Converts the IndexRequest into multiple RelatedPurchase objects.  
-- I.e.  An Order with 3 purchased items, results in 3 separate documents to be indexed in the ElasticSearch node:
{noformat}
{                                                  
"channel" : "nap",
"site" : "nap",
"date" : "2013-05-02T15:31:31",
"products" : [ { "pid" : "111"}, { "pid" : "123"}, { "pid" : "234"} ]
}       
'
{noformat}
{noformat}
{
"pid" : 111,
"channel" : "nap",
"site" : "nap",
"bought-with" : [123,234],
"date" : "2013-04-30T23:51:32"
}

{
"pid" : 123,
"channel" : "nap",
"site" : "nap",
"bought-with" : [111,234],
"date" : "2013-04-30T23:51:32"
}

{
"pid" : 234,
"channel" : "nap",
"site" : "nap",
"bought-with" : [123,111],
"date" : "2013-04-30T23:51:32"
}
{noformat}

- The index requests are sent synchronously via JestClient (one by one to elastic search - https://github.com/searchbox-io/Jest)
-- This should really be a batch index request to 
-- This should really perhaps be asynchronous http request or sent to another outbound ring buffer.




----

h4. Webapp Service Layer


A hack was made to *com.netaporter.services.order.impl.OrderServiceImpl*, to use *https://github.com/AsyncHttpClient/async-http-client*, to call the "*Related Purchase*" service.  The HTTP POST is performed asynchronously.  The *Async-Http-Client* uses Netty under the hood to perform NIO socket requests, over a pool of threads.


----

h4. Webapp View Layer


*HUGE* massive hack directly to the Product Details JSP page to directly call elastic search.  The hack is directly creating a JestClient, to perform a search directly against the ElasticSearch node.  The repsonse is inspected for the Terms returned, which are converted into img links.


This should really be calling the *Related Purchase* service; so that the response from the *Related Purchase* service can be delivered with Cache Control headers to enable client side, and intermediates, to cache the results for a limited time period, and therefore protect the service from a thundering herd of requests.


----



h4. ElasticSearch

This is just the download from the elasticsearch site, version 0.90.0 (http://www.elasticsearch.org/download/).  The only changer that has been made to this is the configuration, to make it save to local disk, and not to multicast (to cluster we'd most likely use the multicasting).

- Running as:
{noformat}
./elasticsearch -p pid.txt -Xmx512m -Xms256 -Des.max-open-files
{noformat}

- config
{noformat}
##################### ElasticSearch Configuration Example #####################

# This file contains an overview of various configuration settings,
# targeted at operations staff. Application developers should
# consult the guide at <http://elasticsearch.org/guide>.
#
# The installation procedure is covered at
# <http://elasticsearch.org/guide/reference/setup/installation.html>.
#
# ElasticSearch comes with reasonable defaults for most settings,
# so you can try it out without bothering with configuration.
#
# Most of the time, these defaults are just fine for running a production
# cluster. If you're fine-tuning your cluster, or wondering about the
# effect of certain configuration option, please _do ask_ on the
# mailing list or IRC channel [http://elasticsearch.org/community].

# Any element in the configuration can be replaced with environment variables
# by placing them in ${...} notation. For example:
#
# node.rack: ${RACK_ENV_VAR}

# See <http://elasticsearch.org/guide/reference/setup/configuration.html>
# for information on supported formats and syntax for the configuration file.


################################### Cluster ###################################

# Cluster name identifies your cluster for auto-discovery. If you're running
# multiple clusters on the same network, make sure you're using unique names.
#
cluster.name: purchasecircle 


#################################### Node #####################################

# Node names are generated dynamically on startup, so you're relieved
# from configuring them manually. You can tie this node to a specific name:
#
# node.name: "Franz Kafka"

# Every node can be configured to allow or deny being eligible as the master,
# and to allow or deny to store the data.
#
# Allow this node to be eligible as a master node (enabled by default):
#
# node.master: true
#
# Allow this node to store data (enabled by default):
#
# node.data: true

# You can exploit these settings to design advanced cluster topologies.
#
# 1. You want this node to never become a master node, only to hold data.
#    This will be the "workhorse" of your cluster.
#
# node.master: false
# node.data: true
#
# 2. You want this node to only serve as a master: to not store any data and
#    to have free resources. This will be the "coordinator" of your cluster.
#
# node.master: true
# node.data: false
#
# 3. You want this node to be neither master nor data node, but
#    to act as a "search load balancer" (fetching data from nodes,
#    aggregating results, etc.)
#
# node.master: false
# node.data: false

# Use the Cluster Health API [http://localhost:9200/_cluster/health], the
# Node Info API [http://localhost:9200/_cluster/nodes] or GUI tools
# such as <http://github.com/lukas-vlcek/bigdesk> and
# <http://mobz.github.com/elasticsearch-head> to inspect the cluster state.

# A node can have generic attributes associated with it, which can later be used
# for customized shard allocation filtering, or allocation awareness. An attribute
# is a simple key value pair, similar to node.key: value, here is an example:
#
# node.rack: rack314

# By default, multiple nodes are allowed to start from the same installation location
# to disable it, set the following:
# node.max_local_storage_nodes: 1

node: 
    name: purchasecircle-1


#################################### Index ####################################

# You can set a number of options (such as shard/replica options, mapping
# or analyzer definitions, translog settings, ...) for indices globally,
# in this file.
#
# Note, that it makes more sense to configure index settings specifically for
# a certain index, either when creating it or by using the index templates API.
#
# See <http://elasticsearch.org/guide/reference/index-modules/> and
# <http://elasticsearch.org/guide/reference/api/admin-indices-create-index.html>
# for more information.

# Set the number of shards (splits) of an index (5 by default):
#
# index.number_of_shards: 5

# Set the number of replicas (additional copies) of an index (1 by default):
#
# index.number_of_replicas: 1

# Note, that for development on a local machine, with small indices, it usually
# makes sense to "disable" the distributed features:
#
# index.number_of_shards: 1
# index.number_of_replicas: 0

# These settings directly affect the performance of index and search operations
# in your cluster. Assuming you have enough machines to hold shards and
# replicas, the rule of thumb is:
#
# 1. Having more *shards* enhances the _indexing_ performance and allows to
#    _distribute_ a big index across machines.
# 2. Having more *replicas* enhances the _search_ performance and improves the
#    cluster _availability_.
#
# The "number_of_shards" is a one-time setting for an index.
#
# The "number_of_replicas" can be increased or decreased anytime,
# by using the Index Update Settings API.
#
# ElasticSearch takes care about load balancing, relocating, gathering the
# results from nodes, etc. Experiment with different settings to fine-tune
# your setup.

# Use the Index Status API (<http://localhost:9200/A/_status>) to inspect
# the index status.

index:
    store:
        type: niofs


#################################### Paths ####################################

# Path to directory containing configuration (this file and logging.yml):
#
# path.conf: /path/to/conf

# Path to directory where to store index data allocated for this node.
#
# path.data: /path/to/data
#
# Can optionally include more than one location, causing data to be striped across
# the locations (a la RAID 0) on a file level, favouring locations with most free
# space on creation. For example:
#
# path.data: /path/to/data1,/path/to/data2

# Path to temporary files:
#
# path.work: /path/to/work

# Path to log files:
#
# path.logs: /path/to/logs

# Path to where plugins are installed:
#
# path.plugins: /path/to/plugins

path:
    logs: /home/d.tootell/elasticdata/logs
    data: /home/d.tootell/elasticdata/data
    work: /home/d.tootell/elasticdata/work


#################################### Plugin ###################################

# If a plugin listed here is not installed for current node, the node will not start.
#
# plugin.mandatory: mapper-attachments,lang-groovy


################################### Memory ####################################

# ElasticSearch performs poorly when JVM starts swapping: you should ensure that
# it _never_ swaps.
#
# Set this property to true to lock the memory:
#
# bootstrap.mlockall: true

# Make sure that the ES_MIN_MEM and ES_MAX_MEM environment variables are set
# to the same value, and that the machine has enough memory to allocate
# for ElasticSearch, leaving enough memory for the operating system itself.
#
# You should also make sure that the ElasticSearch process is allowed to lock
# the memory, eg. by using `ulimit -l unlimited`.


############################## Network And HTTP ###############################

# ElasticSearch, by default, binds itself to the 0.0.0.0 address, and listens
# on port [9200-9300] for HTTP traffic and on port [9300-9400] for node-to-node
# communication. (the range means that if the port is busy, it will automatically
# try the next port).

# Set the bind address specifically (IPv4 or IPv6):
#
# network.bind_host: 192.168.0.1

# Set the address other nodes will use to communicate with this node. If not
# set, it is automatically derived. It must point to an actual IP address.
#
# network.publish_host: 192.168.0.1

# Set both 'bind_host' and 'publish_host':
#
# network.host: 192.168.0.1

# Set a custom port for the node to node communication (9300 by default):
#
# transport.tcp.port: 9300

# Enable compression for all communication between nodes (disabled by default):
#
# transport.tcp.compress: true

# Set a custom port to listen for HTTP traffic:
#
# http.port: 9200

# Set a custom allowed content length:
#
# http.max_content_length: 100mb

# Disable HTTP completely:
#
# http.enabled: false

network:
    host: 10.5.21.152

http:
    port: 9200

transport:
    tcp:
        port: 9300

################################### Gateway ###################################

# The gateway allows for persisting the cluster state between full cluster
# restarts. Every change to the state (such as adding an index) will be stored
# in the gateway, and when the cluster starts up for the first time,
# it will read its state from the gateway.

# There are several types of gateway implementations. For more information,
# see <http://elasticsearch.org/guide/reference/modules/gateway>.

# The default gateway type is the "local" gateway (recommended):
#
# gateway.type: local

gateway:
    type:
        local

# Settings below control how and when to start the initial recovery process on
# a full cluster restart (to reuse as much local data as possible when using shared
# gateway).

# Allow recovery process after N nodes in a cluster are up:
#
# gateway.recover_after_nodes: 1

# Set the timeout to initiate the recovery process, once the N nodes
# from previous setting are up (accepts time value):
#
# gateway.recover_after_time: 5m

# Set how many nodes are expected in this cluster. Once these N nodes
# are up (and recover_after_nodes is met), begin recovery process immediately
# (without waiting for recover_after_time to expire):
#
# gateway.expected_nodes: 2


############################# Recovery Throttling #############################

# These settings allow to control the process of shards allocation between
# nodes during initial recovery, replica allocation, rebalancing,
# or when adding and removing nodes.

# Set the number of concurrent recoveries happening on a node:
#
# 1. During the initial recovery
#
# cluster.routing.allocation.node_initial_primaries_recoveries: 4
#
# 2. During adding/removing nodes, rebalancing, etc
#
# cluster.routing.allocation.node_concurrent_recoveries: 2

# Set to throttle throughput when recovering (eg. 100mb, by default unlimited):
#
# indices.recovery.max_size_per_sec: 0

# Set to limit the number of open concurrent streams when
# recovering a shard from a peer:
#
# indices.recovery.concurrent_streams: 5


################################## Discovery ##################################

# Discovery infrastructure ensures nodes can be found within a cluster
# and master node is elected. Multicast discovery is the default.

# Set to ensure a node sees N other master eligible nodes to be considered
# operational within the cluster. Set this option to a higher value (2-4)
# for large clusters (>3 nodes):
#
# discovery.zen.minimum_master_nodes: 1

# Set the time to wait for ping responses from other nodes when discovering.
# Set this option to a higher value on a slow or congested network
# to minimize discovery failures:
#
# discovery.zen.ping.timeout: 3s

# See <http://elasticsearch.org/guide/reference/modules/discovery/zen.html>
# for more information.

# Unicast discovery allows to explicitly control which nodes will be used
# to discover the cluster. It can be used when multicast is not present,
# or to restrict the cluster communication-wise.
#
# 1. Disable multicast discovery (enabled by default):
#
discovery.zen.ping.multicast.enabled: false
#
# 2. Configure an initial list of master nodes in the cluster
#    to perform discovery when new nodes (master or data) are started:
#
# discovery.zen.ping.unicast.hosts: ["host1", "host2:port", "host3[portX-portY]"]

# EC2 discovery allows to use AWS EC2 API in order to perform discovery.
#
# You have to install the cloud-aws plugin for enabling the EC2 discovery.
#
# See <http://elasticsearch.org/guide/reference/modules/discovery/ec2.html>
# for more information.
#
# See <http://elasticsearch.org/tutorials/2011/08/22/elasticsearch-on-ec2.html>
# for a step-by-step tutorial.


################################## Slow Log ##################################

# Shard level query and fetch threshold logging.

#index.search.slowlog.threshold.query.warn: 10s
#index.search.slowlog.threshold.query.info: 5s
#index.search.slowlog.threshold.query.debug: 2s
#index.search.slowlog.threshold.query.trace: 500ms

#index.search.slowlog.threshold.fetch.warn: 1s
#index.search.slowlog.threshold.fetch.info: 800ms
#index.search.slowlog.threshold.fetch.debug: 500ms
#index.search.slowlog.threshold.fetch.trace: 200ms

#index.indexing.slowlog.threshold.index.warn: 10s
#index.indexing.slowlog.threshold.index.info: 5s
#index.indexing.slowlog.threshold.index.debug: 2s
#index.indexing.slowlog.threshold.index.trace: 500ms

################################## GC Logging ################################

#monitor.jvm.gc.ParNew.warn: 1000ms
#monitor.jvm.gc.ParNew.info: 700ms
#monitor.jvm.gc.ParNew.debug: 400ms

#monitor.jvm.gc.ConcurrentMarkSweep.warn: 10s
#monitor.jvm.gc.ConcurrentMarkSweep.info: 5s
#monitor.jvm.gc.ConcurrentMarkSweep.debug: 2s
{noformat}